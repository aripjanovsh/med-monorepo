import { PrismaClient, ParameterType } from "@prisma/client";

/**
 * Default parameter definitions to seed initially.
 * After seeding, these should be managed via the ParameterDefinition CRUD API.
 */
const DEFAULT_PARAMETER_DEFINITIONS: Array<{
  code: string;
  name: string;
  unit?: string;
  valueType: string;
  comment?: string;
  category: string;
}> = [
  { code: 'PULSE', name: '–ü—É–ª—å—Å', unit: 'bpm', valueType: 'NUMBER', comment: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å', category: 'VITALS_CORE' },
  { code: 'BP_SYS', name: '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ)', unit: 'mmHg', valueType: 'NUMBER', comment: '–í–µ—Ä—Ö–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', category: 'VITALS_CORE' },
  { code: 'BP_DIA', name: '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ)', unit: 'mmHg', valueType: 'NUMBER', comment: '–ù–∏–∂–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', category: 'VITALS_CORE' },
  { code: 'TEMP', name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞', unit: '¬∞C', valueType: 'NUMBER', comment: '–ü–æ–¥–º—ã—à–µ—á–Ω–∞—è / –æ—Ä–∞–ª—å–Ω–∞—è', category: 'VITALS_CORE' },
  { code: 'RESP_RATE', name: '–ß–∞—Å—Ç–æ—Ç–∞ –¥—ã—Ö–∞–Ω–∏—è', unit: 'breaths/min', valueType: 'NUMBER', comment: '–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π', category: 'VITALS_CORE' },
  { code: 'SPO2', name: '–°–∞—Ç—É—Ä–∞—Ü–∏—è –∫–∏—Å–ª–æ—Ä–æ–¥–∞', unit: '%', valueType: 'NUMBER', comment: '–∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø—É–ª—å—Å–æ–∫—Å–∏–º–µ—Ç—Ä–æ–º', category: 'VITALS_CORE' },
  { code: 'HEIGHT', name: '–†–æ—Å—Ç', unit: 'cm', valueType: 'NUMBER', comment: '–≤–≤–æ–¥–∏—Ç—Å—è –≤—Ä—É—á–Ω—É—é', category: 'ANTHROPOMETRY' },
  { code: 'WEIGHT', name: '–í–µ—Å', unit: 'kg', valueType: 'NUMBER', category: 'ANTHROPOMETRY' },
  { code: 'BMI', name: '–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞', unit: 'kg/m¬≤', valueType: 'NUMBER', comment: '–≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', category: 'ANTHROPOMETRY' },
  { code: 'BODY_SURFACE_AREA', name: '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ç–µ–ª–∞', unit: 'm¬≤', valueType: 'NUMBER', comment: '–ø–æ —Ñ–æ—Ä–º—É–ª–µ Mosteller', category: 'ANTHROPOMETRY' },
  { code: 'WAIST_CIRC', name: '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏', unit: 'cm', valueType: 'NUMBER', comment: '–ø—Ä–∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–∞—Ö', category: 'ANTHROPOMETRY' },
  { code: 'HIP_CIRC', name: '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –±–µ–¥–µ—Ä', unit: 'cm', valueType: 'NUMBER', comment: '–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ WHR', category: 'ANTHROPOMETRY' },
  { code: 'WHR', name: '–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∞–ª–∏–∏ –∫ –±–µ–¥—Ä–∞–º', valueType: 'NUMBER', comment: '–≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è', category: 'ANTHROPOMETRY' },
];

export class ParameterDefinitionSeed {
  constructor(private readonly prisma: PrismaClient) {}

  async seedParameterDefinitions(organizationId: string) {
    console.log("üìä Seeding parameter definitions...");

    const existing = await this.prisma.parameterDefinition.findMany({
      where: { organizationId },
      select: { code: true },
    });

    const existingCodes = new Set(existing.map((p) => p.code));

    const newDefinitions = DEFAULT_PARAMETER_DEFINITIONS.filter(
      (def) => !existingCodes.has(def.code)
    ).map((def) => ({
      code: def.code,
      name: def.name,
      category: def.category,
      valueType: def.valueType as ParameterType,
      defaultUnit: def.unit ?? null,
      description: def.comment ?? null,
      normalRange: null,
      isActive: true,
      organizationId,
    }));

    if (newDefinitions.length > 0) {
      await this.prisma.parameterDefinition.createMany({
        data: newDefinitions,
        skipDuplicates: true,
      });
      console.log(`‚úÖ Created ${newDefinitions.length} parameter definitions`);
    } else {
      console.log("‚ÑπÔ∏è  All parameter definitions already exist");
    }

    return { count: newDefinitions.length };
  }
}
