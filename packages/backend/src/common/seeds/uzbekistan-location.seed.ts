import { PrismaClient, LocationType } from "@prisma/client";
import { buildSearchTokens } from "../utils/transliteration.util";

export class UzbekistanLocationSeed {
  constructor(private readonly prisma: PrismaClient) {}

  async seedUzbekistanLocations() {
    console.log("üó∫Ô∏è Seeding Uzbekistan location data...");

    try {
      // 1. Create Uzbekistan country
      // For root locations (countries), we need to check by name only since parentId is null
      let uzbekistan = await this.prisma.location.findFirst({
        where: {
          name: "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
          parentId: null,
          type: LocationType.COUNTRY,
        },
      });

      if (!uzbekistan) {
        uzbekistan = await this.prisma.location.create({
          data: {
            name: "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            code: "UZ",
            type: LocationType.COUNTRY,
            weight: 1,
            description:
              "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω - –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏",
            searchField: buildSearchTokens(["–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "UZ"]),
            isActive: true,
          },
        });
      }

      console.log("‚úÖ Created country: –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω");
      // Ensure searchField is populated for existing country as well
      await this.prisma.location.update({
        where: { id: uzbekistan.id },
        data: {
          searchField: buildSearchTokens([
            uzbekistan.name,
            uzbekistan.code ?? undefined,
          ]),
        },
      });

      // 2. Create regions with correct hierarchy structure
      const regionsData = [
        // –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω
        {
          name: "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω",
          code: "QR",
          type: LocationType.REGION,
          weight: 1,
          description: "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },

        // –ì–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –≥–æ—Ä–æ–¥-—Ä–µ–≥–∏–æ–Ω)
        {
          name: "–≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç",
          code: "TK",
          type: LocationType.CITY,
          weight: 2,
          description: "–°—Ç–æ–ª–∏—Ü–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
        },

        // –û–±–ª–∞—Å—Ç–∏ (Oblasts)
        {
          name: "–ê–Ω–¥–∏–∂–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "AN",
          type: LocationType.REGION,
          weight: 3,
          description: "–û–±–ª–∞—Å—Ç—å –≤ –≤–æ—Å—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–ë—É—Ö–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "BU",
          type: LocationType.REGION,
          weight: 4,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–î–∂–∏–∑–∞–∫—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "DJ",
          type: LocationType.REGION,
          weight: 5,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–ö–∞—à–∫–∞–¥–∞—Ä—å–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "QA",
          type: LocationType.REGION,
          weight: 6,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —é–∂–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–ù–∞–≤–æ–∏–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "NW",
          type: LocationType.REGION,
          weight: 7,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–ù–∞–º–∞–Ω–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "NG",
          type: LocationType.REGION,
          weight: 8,
          description: "–û–±–ª–∞—Å—Ç—å –≤ –≤–æ—Å—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "SA",
          type: LocationType.REGION,
          weight: 9,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "SU",
          type: LocationType.REGION,
          weight: 10,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —é–∂–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–°—ã—Ä–¥–∞—Ä—å–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "SI",
          type: LocationType.REGION,
          weight: 11,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "TO",
          type: LocationType.REGION,
          weight: 12,
          description: "–û–±–ª–∞—Å—Ç—å –≤ —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–§–µ—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "FA",
          type: LocationType.REGION,
          weight: 13,
          description: "–û–±–ª–∞—Å—Ç—å –≤ –≤–æ—Å—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
        {
          name: "–•–æ—Ä–µ–∑–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          code: "XO",
          type: LocationType.REGION,
          weight: 14,
          description: "–û–±–ª–∞—Å—Ç—å –≤ –∑–∞–ø–∞–¥–Ω–æ–π —á–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        },
      ];

      const createdRegions = new Map<string, any>();
      for (const regionData of regionsData) {
        let region = await this.prisma.location.findFirst({
          where: {
            name: regionData.name,
            parentId: uzbekistan.id,
            type: regionData.type,
          },
        });

        if (!region) {
          region = await this.prisma.location.create({
            data: {
              ...regionData,
              parentId: uzbekistan.id,
              searchField: buildSearchTokens([
                regionData.name,
                regionData.code,
                uzbekistan.name,
              ]),
              isActive: true,
            },
          });
        }

        // Ensure searchField is populated/updated
        await this.prisma.location.update({
          where: { id: region.id },
          data: {
            searchField: buildSearchTokens([
              region.name,
              region.code ?? undefined,
              uzbekistan.name,
            ]),
          },
        });

        createdRegions.set(regionData.name, region);
        console.log(`‚úÖ Created region: ${regionData.name}`);
      }

      // 3. Create districts for "–≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç" (directly under region)
      const tashkentRegion = createdRegions.get("–≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç");
      if (tashkentRegion) {
        const tashkentDistricts = [
          {
            name: "–ê–ª–º–∞–∑–∞—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "ALM",
            weight: 1,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–ë–µ–∫—Ç–µ–º–∏—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "BEK",
            weight: 2,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "MIR",
            weight: 3,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "MUL",
            weight: 4,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "SER",
            weight: 5,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "UCH",
            weight: 6,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "CHI",
            weight: 7,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–®–∞–π—Ö–∞–Ω—Ç–∞—Ö—É—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "SHA",
            weight: 8,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "YUN",
            weight: 9,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "YAK",
            weight: 10,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–Ø—à–Ω–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "YAS",
            weight: 11,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
          {
            name: "–ó–∞–Ω–≥–∏–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            code: "ZAN",
            weight: 12,
            description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç",
          },
        ];

        for (const districtData of tashkentDistricts) {
          let district = await this.prisma.location.findFirst({
            where: {
              name: districtData.name,
              parentId: tashkentRegion.id,
              type: LocationType.DISTRICT,
            },
          });

          if (!district) {
            district = await this.prisma.location.create({
              data: {
                ...districtData,
                type: LocationType.DISTRICT,
                parentId: tashkentRegion.id,
                searchField: buildSearchTokens([
                  districtData.name,
                  districtData.code,
                  tashkentRegion.name,
                ]),
                isActive: true,
              },
            });
          }
          // Ensure searchField for existing district
          await this.prisma.location.update({
            where: { id: district.id },
            data: {
              searchField: buildSearchTokens([
                district.name,
                district.code ?? undefined,
                tashkentRegion.name,
              ]),
            },
          });
          console.log(`‚úÖ Created district: ${districtData.name}`);
        }
      }

      // 4. Create cities for other regions (oblast structure: Region -> City -> District)
      const citiesData = [
        // –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        {
          regionName: "–ê–Ω–¥–∏–∂–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          cities: [
            {
              name: "–≥–æ—Ä–æ–¥ –ê–Ω–¥–∏–∂–∞–Ω",
              code: "AND",
              weight: 1,
              description: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            },
            {
              name: "–≥–æ—Ä–æ–¥ –•–∞–Ω–∞–±–∞–¥",
              code: "HAN",
              weight: 2,
              description: "–ì–æ—Ä–æ–¥ –≤ –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            },
          ],
        },
        // –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        {
          regionName: "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          cities: [
            {
              name: "–≥–æ—Ä–æ–¥ –ß–∏—Ä—á–∏–∫",
              code: "CHR",
              weight: 1,
              description: "–ì–æ—Ä–æ–¥ –≤ –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            },
            {
              name: "–≥–æ—Ä–æ–¥ –ê–Ω–≥—Ä–µ–Ω",
              code: "ANG",
              weight: 2,
              description: "–ì–æ—Ä–æ–¥ –≤ –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            },
          ],
        },
        // –°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        {
          regionName: "–°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          cities: [
            {
              name: "–≥–æ—Ä–æ–¥ –°–∞–º–∞—Ä–∫–∞–Ω–¥",
              code: "SAM",
              weight: 1,
              description: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä –°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            },
          ],
        },
      ];

      const createdCities = new Map<string, any>();
      for (const regionData of citiesData) {
        const region = createdRegions.get(regionData.regionName);
        if (region) {
          for (const cityData of regionData.cities) {
            let city = await this.prisma.location.findFirst({
              where: {
                name: cityData.name,
                parentId: region.id,
                type: LocationType.CITY,
              },
            });

            if (!city) {
              city = await this.prisma.location.create({
                data: {
                  ...cityData,
                  type: LocationType.CITY,
                  parentId: region.id,
                  searchField: buildSearchTokens([
                    cityData.name,
                    cityData.code,
                    region.name,
                  ]),
                  isActive: true,
                },
              });
            }

            createdCities.set(
              `${regionData.regionName}-${cityData.name}`,
              city,
            );
            console.log(
              `‚úÖ Created city: ${cityData.name} in ${regionData.regionName}`,
            );

            // Ensure searchField for existing city
            await this.prisma.location.update({
              where: { id: city.id },
              data: {
                searchField: buildSearchTokens([
                  city.name,
                  city.code ?? undefined,
                  region.name,
                ]),
              },
            });
          }
        }
      }

      // 5. Create some sample districts for cities in oblasts
      const districtsData = [
        // –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å -> –≥–æ—Ä–æ–¥ –ê–Ω–¥–∏–∂–∞–Ω
        {
          cityKey: "–ê–Ω–¥–∏–∂–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å-–≥–æ—Ä–æ–¥ –ê–Ω–¥–∏–∂–∞–Ω",
          districts: [
            {
              name: "–ê–ª—Ç—ã–Ω–∫—É–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω",
              code: "ALT",
              weight: 1,
              description: "–†–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ –ê–Ω–¥–∏–∂–∞–Ω",
            },
            {
              name: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω",
              code: "CEN",
              weight: 2,
              description: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞ –ê–Ω–¥–∏–∂–∞–Ω",
            },
          ],
        },
        // –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å -> –≥–æ—Ä–æ–¥ –ß–∏—Ä—á–∏–∫
        {
          cityKey: "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å-–≥–æ—Ä–æ–¥ –ß–∏—Ä—á–∏–∫",
          districts: [
            {
              name: "–ë—É—Å—Ç–∞–Ω–ª—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω",
              code: "BUS",
              weight: 1,
              description: "–†–∞–π–æ–Ω –≤ –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            },
          ],
        },
      ];

      for (const cityData of districtsData) {
        const city = createdCities.get(cityData.cityKey);
        if (city) {
          for (const districtData of cityData.districts) {
            let district = await this.prisma.location.findFirst({
              where: {
                name: districtData.name,
                parentId: city.id,
                type: LocationType.DISTRICT,
              },
            });

            if (!district) {
              district = await this.prisma.location.create({
                data: {
                  ...districtData,
                  type: LocationType.DISTRICT,
                  parentId: city.id,
                  searchField: buildSearchTokens([
                    districtData.name,
                    districtData.code,
                    city.name,
                  ]),
                  isActive: true,
                },
              });
            }
            console.log(
              `‚úÖ Created district: ${districtData.name} in ${city.name}`,
            );
            // Ensure searchField for existing district
            await this.prisma.location.update({
              where: { id: district.id },
              data: {
                searchField: buildSearchTokens([
                  district.name,
                  district.code ?? undefined,
                  city.name,
                ]),
              },
            });
          }
        }
      }

      console.log("‚úÖ Uzbekistan location data seeded successfully!");

      return {
        country: uzbekistan,
        regionsCount: regionsData.length,
        tashkentDistrictsCount: 12,
        citiesCount: createdCities.size,
        otherDistrictsCount: 3,
      };
    } catch (error) {
      console.error("‚ùå Error seeding Uzbekistan location data:", error);
      throw error;
    }
  }
}
